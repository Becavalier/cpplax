set(TEST_PATH tests)

include(CTest)
file(GLOB children "${TEST_PATH}/*")
if("$ENV{TEST_TARGET}" STREQUAL "INTERPRETER")
  set(EXTRA_TEST_ARG "-i")
endif()
foreach(child ${children})
  get_filename_component(folderName "${child}" NAME)
  if(IS_DIRECTORY ${child})
    file(GLOB files "${child}/*.lax")
    foreach(file ${files})
      get_filename_component(fileName "${file}" NAME)
      add_test(NAME "${folderName}/${fileName}" COMMAND $<TARGET_FILE:cpplax> ${EXTRA_TEST_ARG} ${file})
    endforeach()
  endif()
endforeach()

# CTest will accidentally add a "\n" character at the end of each input, which actually does not belong to the original output of the test cases.
set_property(TEST assignment/associativity.lax PROPERTY PASS_REGULAR_EXPRESSION "^ccc5varvar\n$")
set_property(TEST assignment/global.lax PROPERTY PASS_REGULAR_EXPRESSION "^beforeafterargarg\n$")
set_property(TEST assignment/grouping.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 2\\\] Error: at \\\"=\\\", invalid assignment target.\n")
set_property(TEST assignment/infix-operator.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 3\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/prefix-operator.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 2\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/local.lax PROPERTY PASS_REGULAR_EXPRESSION "^beforeafterargarg\n$")
set_property(TEST assignment/this.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 3\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/undefined.lax PROPERTY PASS_REGULAR_EXPRESSION "undefined variable 'unknown'.")
set_property(TEST block/empty.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST block/scope.lax PROPERTY PASS_REGULAR_EXPRESSION "^innerouter\n$")
set_property(TEST bool/equality.lax PROPERTY PASS_REGULAR_EXPRESSION "^truefalsefalsetruefalsefalsefalsefalsefalsefalsefalsetruetruefalsetruetruetruetruetrue\n$")
set_property(TEST bool/not.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsetruetruetruefalsefalse\n$")
set_property(TEST call/bool.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/nil.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/num.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/object.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/string.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST class/empty.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST class/inherit-self.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 1\\\] Error: at \\\"Foo\\\", a class can't inherit from itself.|\\\[Line 1\\\] Error: at \\\"Foo\\\"\\\, undefined variable 'Foo'.)")
set_property(TEST class/inherited-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^in fooin barin baz\n$")
set_property(TEST class/local-inherit-other.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class B>\n$")
set_property(TEST class/local-inherit-self.lax PROPERTY PASS_REGULAR_EXPRESSION "(can't read local variable in its own initializer|a class can't inherit from itself)")
set_property(TEST class/local-reference-self.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST class/reference-self.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST closure/assign-to-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^localafter fafter fafter g\n$")
set_property(TEST closure/assign-to-shadowed-later.lax PROPERTY PASS_REGULAR_EXPRESSION "^innerassigned\n$")
set_property(TEST closure/close-over-function-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "^param\n$")
set_property(TEST closure/close-over-later-variable.lax PROPERTY PASS_REGULAR_EXPRESSION "^ba\n$")
set_property(TEST closure/close-over-method-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "^param\n$")
set_property(TEST closure/closed-closure-in-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^local\n$")
set_property(TEST closure/nested-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^abc\n$")
set_property(TEST closure/open-closure-in-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^local\n$")
set_property(TEST closure/reference-closure-multiple-times.lax PROPERTY PASS_REGULAR_EXPRESSION "^aa\n$")
set_property(TEST closure/reuse-closure-slot.lax PROPERTY PASS_REGULAR_EXPRESSION "^a\n$")
set_property(TEST closure/shadow-closure-with-local.lax PROPERTY PASS_REGULAR_EXPRESSION "^closureshadowclosure\n$")
set_property(TEST closure/unused-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST closure/unused-later-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^a\n$")
set_property(TEST comments/line-at-eof.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST comments/unicode.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST comments/multi-line-comment.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST constructor/arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "^init12\n$")
set_property(TEST constructor/call-init-early-return.lax PROPERTY PASS_REGULAR_EXPRESSION "^initinit<instance Foo>\n$")
set_property(TEST constructor/call-init-explicitly.lax PROPERTY PASS_REGULAR_EXPRESSION "^Foo.init\\\(one\\\)Foo.init\\\(two\\\)<instance Foo>init\n$")
set_property(TEST constructor/default-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 0 arguments but got 3")
set_property(TEST constructor/default.lax PROPERTY PASS_REGULAR_EXPRESSION "^<instance Foo>\n$")
set_property(TEST constructor/early-return.lax PROPERTY PASS_REGULAR_EXPRESSION "^init<instance Foo>\n$")
set_property(TEST constructor/extra-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 2 arguments but got 4.")
set_property(TEST constructor/init-not-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^not initializer\n$")
set_property(TEST constructor/missing-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 2 arguments but got 1.")
set_property(TEST constructor/return-in-nested-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^bar<instance Foo>\n$")
set_property(TEST constructor/return-value.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"return\\\", can't return a value from an initializer.")
set_property(TEST expressions/evaluate.lax PROPERTY PASS_REGULAR_EXPRESSION "^2\n$")
set_property(TEST expressions/precedence.lax PROPERTY PASS_REGULAR_EXPRESSION "^14840truetruetruetrue00004\n$")
set_property(TEST field/call-function-field.lax PROPERTY PASS_REGULAR_EXPRESSION "^bar12\n$")
set_property(TEST field/call-nonfunction-field.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 6\\\] Error:( at \\\"\\\)\\\",)? can only call functions and classes\\\.")
set_property(TEST field/get-and-set-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^other1method2\n$")
set_property(TEST field/get-on-bool.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/get-on-class.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error:( at \\\"bar\\\",)? only instances have properties\\\.")
set_property(TEST field/get-on-function.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"bar\\\",)? only instances have properties\\\.")
set_property(TEST field/get-on-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/get-on-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/get-on-string.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/many.lax PROPERTY PASS_REGULAR_EXPRESSION "^appleapricotavocadobananabilberryblackberryblackcurrantblueberryboysenberrycantaloupecherimoyacherryclementinecloudberrycoconutcranberrycurrantdamsondatedragonfruitdurianelderberryfeijoafiggooseberrygrapegrapefruitguavahoneydewhuckleberryjabuticabajackfruitjambuljujubejuniperkiwifruitkumquatlemonlimelonganloquatlycheemandarinemangomarionberrymelonmiraclemulberrynancenectarineoliveorangepapayapassionfruitpeachpearpersimmonphysalispineappleplantainplumplumcotpomegranatepomeloquinceraisinrambutanraspberryredcurrantsalaksalmonberrysatsumastrawberrytamarillotamarindtangerinetomatowatermelonyuzu\n$")
set_property(TEST field/method-binds-this.lax PROPERTY PASS_REGULAR_EXPRESSION "^foo11\n$")
set_property(TEST field/method.lax PROPERTY PASS_REGULAR_EXPRESSION "^arg\n$")
set_property(TEST field/on-instance.lax PROPERTY PASS_REGULAR_EXPRESSION "^bar valuebaz valuebar valuebaz value\n$")
set_property(TEST field/set-evaluation-order.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"undefined1\\\",)? undefined variable 'undefined1'\\\.")
set_property(TEST field/set-on-bool.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/set-on-class.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error:( at \\\"bar\\\",)? only instances have properties\\\.")
set_property(TEST field/set-on-function.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"bar\\\",)? only instances have properties\\\.")
set_property(TEST field/set-on-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/set-on-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/set-on-string.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"foo\\\",)? only instances have properties\\\.")
set_property(TEST field/undefined.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 4\\\] Error:( at \\\"bar\\\",)? undefined property 'bar'\\\.")
set_property(TEST for/class-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"class\\\", expect expression\\\.")
set_property(TEST for/closure-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "^414243\n$")
set_property(TEST for/func-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"fn\\\", expect expression\\\.")
set_property(TEST for/return-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^i\n$")
set_property(TEST for/return-inside.lax PROPERTY PASS_REGULAR_EXPRESSION "^i\n$")
set_property(TEST for/scope.lax PROPERTY PASS_REGULAR_EXPRESSION "^0-1after0\n$")
set_property(TEST for/statement-condition.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"{\\\", expect expression\\\.\n\\\[Line 3\\\] Error: at \\\"\\\)\\\", expect '\\\;' after expression\\\.")
set_property(TEST for/statement-increment.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"{\\\", expect expression\\\.")
set_property(TEST for/statement-initializer.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"{\\\", expect expression\\\.\n\\\[Line 3\\\] Error: at \\\"\\\)\\\", expect '\\\;' after expression\\\.")
set_property(TEST for/syntax.lax PROPERTY PASS_REGULAR_EXPRESSION "^123012done0101201\n$")
set_property(TEST for/var-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"var\\\", expect expression\\\.")
set_property(TEST function/body-must-be-block.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"123\\\", expect '{' before function body\\\.")
set_property(TEST function/empty-body.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST function/extra-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 6\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 4\\\.")
set_property(TEST function/local-mutual-recursion.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 4\\\] Error:( at \\\"isOdd\\\",)? undefined variable 'isOdd'\\\.")
set_property(TEST function/local-recursion.lax PROPERTY PASS_REGULAR_EXPRESSION "^21\n$")
set_property(TEST function/many-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 260\\\] Error: at \\\"a\\\", can't have more than 255 arguments\\\.")
set_property(TEST function/many-parameters.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 257\\\] Error: at \\\"a\\\", can't have more than 255 parameters\\\.")
set_property(TEST function/missing-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 1\\\.")
set_property(TEST function/missing-comma-in-parameters.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"c\\\", expect '\\\)' after parameters\\\.")
set_property(TEST function/mutual-recursion.lax PROPERTY PASS_REGULAR_EXPRESSION "^truetrue\n$")
set_property(TEST function/nested-call-with-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "^hello world\n$")
set_property(TEST function/parameters.lax PROPERTY PASS_REGULAR_EXPRESSION "^01361015212836\n$")
set_property(TEST function/print.lax PROPERTY PASS_REGULAR_EXPRESSION "^<fn foo><fn native>\n$")
set_property(TEST function/recursion.lax PROPERTY PASS_REGULAR_EXPRESSION "^21\n$")
set_property(TEST if/class-in-else.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"class\\\", expect expression\\\.)")
set_property(TEST if/class-in-then.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"class\\\", expect expression\\\.)")
set_property(TEST if/dangling-else.lax PROPERTY PASS_REGULAR_EXPRESSION "^good\n$")
set_property(TEST if/else.lax PROPERTY PASS_REGULAR_EXPRESSION "^goodgoodblock\n$")
set_property(TEST if/func-in-else.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"fn\\\", expect expression\\\.)")
set_property(TEST if/func-in-then.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"fn\\\", expect expression\\\.)")
set_property(TEST if/if.lax PROPERTY PASS_REGULAR_EXPRESSION "^goodblocktrue\n$")
set_property(TEST if/truth.lax PROPERTY PASS_REGULAR_EXPRESSION "^falseniltrue0empty\n$")
set_property(TEST if/var-in-else.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"var\\\", expect expression\\\.)")
set_property(TEST if/var-in-then.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"var\\\", expect expression\\\.)")
set_property(TEST inheritance/constructor.lax PROPERTY PASS_REGULAR_EXPRESSION "^value\n$")
set_property(TEST inheritance/inherit-from-function.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"foo\\\",)? super class must be a class\\\.")
set_property(TEST inheritance/inherit-from-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error:( at \\\"Nil\\\",)? super class must be a class\\\.")
set_property(TEST inheritance/inherit-from-number.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error:( at \\\"Number\\\",)? super class must be a class\\\.")
set_property(TEST inheritance/inherit-methods.lax PROPERTY PASS_REGULAR_EXPRESSION "^foobarbar\n$")
set_property(TEST inheritance/parenthesized-superclass.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 4\\\] Error: at \\\"\\\(\\\", expect superclass name\\\.)")
set_property(TEST inheritance/set-fields-from-base-class.lax PROPERTY PASS_REGULAR_EXPRESSION "^foo 1foo 2bar 1bar 2bar 1bar 2\n$")
# The interpreter is free at limiting resources for the below cases.
set_property(TEST limit/stack-overflow.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 18\\\] Error:( at \\\"\\\)\\\",)? stack overflow\\\.")
set_property(TEST limit/loop-too-large.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2352\\\] Error: at \\\"end\\\", loop body too large\\\.|)")
set_property(TEST limit/no-reuse-constants.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 35\\\] Error: at \\\"1\\\", too many constants in one chunk\\\.|)")
set_property(TEST limit/too-many-constants.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 35\\\] Error: at \\\"oops\\\", too many constants in one chunk\\\.|)")
set_property(TEST limit/too-many-locals.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 52\\\] Error: at \\\"oops\\\", too many local variables in function\\\.|)")
set_property(TEST limit/too-many-upvalues.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 102\\\] Error: at \\\"oops\\\", too many closure variables in function\\\.|)")
set_property(TEST logical-operator/and-truth.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsenilokokok\n$")
set_property(TEST logical-operator/and.lax PROPERTY PASS_REGULAR_EXPRESSION "^false1falsetrue3truefalse\n$")
set_property(TEST logical-operator/or-truth.lax PROPERTY PASS_REGULAR_EXPRESSION "^okoktrue0s\n$")
set_property(TEST logical-operator/or.lax PROPERTY PASS_REGULAR_EXPRESSION "^11truefalsefalsefalsetrue\n$")
set_property(TEST method/arity.lax PROPERTY PASS_REGULAR_EXPRESSION "^no args1361015212836\n$")
set_property(TEST method/empty-block.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST method/extra-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 8\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 4\\\.")
set_property(TEST method/missing-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 5\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 1\\\.")
set_property(TEST method/not-found.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"unknown\\\",)? undefined property 'unknown'\\\.")
set_property(TEST method/print-bound-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^<fn method>\n$")
set_property(TEST method/refer-to-name.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error:( at \\\"method\\\",)? undefined variable 'method'\\\.")
set_property(TEST method/too-many-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 259\\\] Error: at \\\"a\\\", can't have more than 255 arguments\\\.)")
set_property(TEST method/too-many-parameters.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 258\\\] Error: at \\\"a\\\", can't have more than 255 parameters\\\.)")
set_property(TEST nil/literal.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST number/decimal-point-at-eof.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 3\\\] Error: at \\\"end\\\", expect property name after '\\\.'\\\.)")
set_property(TEST number/leading-dot.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: at \\\"\\\.\\\", expect expression\\\.)")
set_property(TEST number/literals.lax PROPERTY PASS_REGULAR_EXPRESSION "^1239876540-0123.456-0.001\n$")
set_property(TEST number/nan-equality.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsetruefalsetrue\n$")
set_property(TEST number/trailing-dot.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"\\\;\\\", expect property name after '\\\.'\\\.")
set_property(TEST operator/add-bool-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\+\\\",)? invalid operand types for \\\"\\\+\\\" operator\\\.")
set_property(TEST operator/add-bool-string.lax PROPERTY PASS_REGULAR_EXPRESSION "^trues\n$")
set_property(TEST operator/add-bool-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\+\\\",)? invalid operand types for \\\"\\\+\\\" operator\\\.")
set_property(TEST operator/add-nil-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\+\\\",)? invalid operand types for \\\"\\\+\\\" operator\\\.")
set_property(TEST operator/add-num-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\+\\\",)? invalid operand types for \\\"\\\+\\\" operator\\\.")
set_property(TEST operator/add-string-nil.lax PROPERTY PASS_REGULAR_EXPRESSION "^snil\n$")
set_property(TEST operator/add.lax PROPERTY PASS_REGULAR_EXPRESSION "^579string\n$")
set_property(TEST operator/comparison.lax PROPERTY PASS_REGULAR_EXPRESSION "^truefalsefalsetruetruefalsefalsefalsetruefalsetruetruefalsefalsefalsefalsetruetruetruetrue\n$")
set_property(TEST operator/divide-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\/\\\",)? operands must be numbers\\\.")
set_property(TEST operator/divide.lax PROPERTY PASS_REGULAR_EXPRESSION "^41\n$")
set_property(TEST operator/equals-class.lax PROPERTY PASS_REGULAR_EXPRESSION "^truefalsefalsetruefalsefalsefalsefalse\n$")
set_property(TEST operator/divide-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\/\\\",)? operands must be numbers\\\.")
set_property(TEST operator/equals-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^truefalse\n$") 
set_property(TEST operator/greater-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\>\\\",)? operands must be numbers\\\.")
set_property(TEST operator/equals.lax PROPERTY PASS_REGULAR_EXPRESSION "^truetruefalsetruefalsetruefalsefalsefalsefalse\n$")
set_property(TEST operator/greater-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\>\\\",)? operands must be numbers\\\.")
set_property(TEST operator/greater-or-equal-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\>=\\\",)? operands must be numbers\\\.")
set_property(TEST operator/greater-or-equal-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\>=\\\",)? operands must be numbers\\\.")
set_property(TEST operator/less-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\<\\\",)? operands must be numbers\\\.")
set_property(TEST operator/less-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\<\\\",)? operands must be numbers\\\.")
set_property(TEST operator/less-or-equal-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\<=\\\",)? operands must be numbers\\\.")
set_property(TEST operator/less-or-equal-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\<=\\\",)? operands must be numbers\\\.")
set_property(TEST operator/multiply-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\*\\\",)? operands must be numbers\\\.")
set_property(TEST operator/multiply-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"\\\*\\\",)? operands must be numbers\\\.")
set_property(TEST operator/multiply.lax PROPERTY PASS_REGULAR_EXPRESSION "^153.702\n$")
set_property(TEST operator/negate-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"-\\\",)? operand must be a number\\\.")
set_property(TEST operator/negate.lax PROPERTY PASS_REGULAR_EXPRESSION "^-33-3\n$") 
set_property(TEST operator/not-class.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsefalse\n$")
set_property(TEST operator/not-equals.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsefalsetruefalsetruefalsetruetruetruetrue\n$") 
set_property(TEST operator/not.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsetruetruefalsefalsetruefalsefalse\n$")
set_property(TEST operator/subtract-nonnum-num.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"-\\\",)? operands must be numbers\\\.")
set_property(TEST operator/subtract-num-nonnum.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"-\\\",)? operands must be numbers\\\.")
set_property(TEST operator/subtract.lax PROPERTY PASS_REGULAR_EXPRESSION "^10\n$") 
set_property(TEST return/after-else.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST return/after-if.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST return/after-while.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST return/at-top-level.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error: at \\\"return\\\", can't return from top-level code\\\.")
set_property(TEST return/in-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST return/return-nil-if-no-value.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST return/in-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST string/error-after-multiline.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 7\\\] Error:( at \\\"err\\\",)? undefined variable 'err'\\\.")
set_property(TEST string/literals.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\(\\\)a stringA~¶Þॐஃ\n$")
set_property(TEST string/multiline.lax PROPERTY PASS_REGULAR_EXPRESSION "^1\n2\n3\n$")
set_property(TEST string/unterminated.lax PROPERTY PASS_REGULAR_EXPRESSION "(\\\[Line 2\\\] Error: unterminated string\\\.)")
set_property(TEST super/bound-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^A\\\.method\\\(arg\\\)\n$")
set_property(TEST super/call-other-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^Derived\\\.bar\\\(\\\)Base.foo\\\(\\\)\n$")
set_property(TEST super/call-same-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^Derived\\\.foo\\\(\\\)Base\\\.foo\\\(\\\)\n$")
set_property(TEST super/closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^Base\n$")
set_property(TEST super/constructor.lax PROPERTY PASS_REGULAR_EXPRESSION "^Derived\\\.init\\\(\\\)Base\\\.init\\\(a, b\\\)\n$")
set_property(TEST super/extra-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "Derived\\\.foo\\\(\\\)\\\[Line 10\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 4\\\.")
set_property(TEST super/indirectly-inherited.lax PROPERTY PASS_REGULAR_EXPRESSION "^C\\\.foo\\\(\\\)A\\\.foo\\\(\\\)\n$")
set_property(TEST super/missing-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 9\\\] Error:( at \\\"\\\)\\\",)? expected 2 arguments but got 1\\\.")
set_property(TEST super/no-superclass-bind.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"super\\\", can't use 'super' in a class with no superclass\\\.")
set_property(TEST super/no-superclass-call.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"super\\\", can't use 'super' in a class with no superclass\\\.")
set_property(TEST super/no-superclass-method.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 5\\\] Error:( at \\\"doesNotExist\\\",)? undefined property 'doesNotExist'\\\.")
set_property(TEST super/parenthesized.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 8\\\] Error: at \\\"\\\)\\\", expect '\\\.' after 'super'\\\.")
set_property(TEST super/reassign-superclass.lax PROPERTY PASS_REGULAR_EXPRESSION "^Base\\\.method\\\(\\\)Base\\\.method\\\(\\\)\n$")
set_property(TEST super/super-in-closure-in-inherited-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^A\n$")
set_property(TEST super/super-at-top-level.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line [1|2]\\\] Error: at \\\"super\\\", can't use 'super' outside of a class\\\.")
set_property(TEST super/super-in-inherited-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^A\n$")
set_property(TEST super/super-in-top-level-function.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error: at \\\"super\\\", can't use 'super' outside of a class\\\.")
set_property(TEST super/super-without-name.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 5\\\] Error: at \\\"\\\;\\\", expect superclass method name\\\.")
set_property(TEST super/super-without-dot.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 6\\\] Error: at \\\"\\\;\\\", expect '\\\.' after 'super'\\\.")
set_property(TEST super/this-in-superclass-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^ab\n$")
set_property(TEST this/closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^Foo\n$")
set_property(TEST this/nested-class.lax PROPERTY PASS_REGULAR_EXPRESSION "^<instance Outer><instance Outer><instance Inner>\n$")
set_property(TEST this/nested-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^Foo\n$")
set_property(TEST this/this-in-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^baz\n$")
set_property(TEST this/this-at-top-level.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error: at \\\"this\\\", can't use 'this' outside of a class\\\.")
set_property(TEST this/this-in-top-level-function.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"this\\\", can't use 'this' outside of a class\\\.")
set_property(TEST variable/collide-with-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"a\\\", already a variable with this name in this scope\\\.")
set_property(TEST variable/duplicate-local.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"a\\\", already a variable with this name in this scope\\\.")
set_property(TEST variable/early-bound.lax PROPERTY PASS_REGULAR_EXPRESSION "^outerouter\n$")
set_property(TEST variable/duplicate-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"arg\\\", already a variable with this name in this scope\\\.")
set_property(TEST variable/in-middle-of-block.lax PROPERTY PASS_REGULAR_EXPRESSION "^aa ba ca b d\n$")
set_property(TEST variable/in-nested-block.lax PROPERTY PASS_REGULAR_EXPRESSION "^outer\n$")
set_property(TEST variable/local-from-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^variable\n$")
set_property(TEST variable/redeclare-global.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST variable/redefine-global.lax PROPERTY PASS_REGULAR_EXPRESSION "^2\n$")
set_property(TEST variable/scope-reuse-in-different-blocks.lax PROPERTY PASS_REGULAR_EXPRESSION "^firstsecond\n$")
set_property(TEST variable/shadow-and-local.lax PROPERTY PASS_REGULAR_EXPRESSION "^outerinner\n$")
set_property(TEST variable/shadow-global.lax PROPERTY PASS_REGULAR_EXPRESSION "^shadowglobal\n$")
set_property(TEST variable/shadow-local.lax PROPERTY PASS_REGULAR_EXPRESSION "^shadowlocal\n$")
set_property(TEST variable/undefined-global.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error:( at \\\"notDefined\\\",)? undefined variable 'notDefined'\\\.")
set_property(TEST variable/undefined-local.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error:( at \\\"notDefined\\\",)? undefined variable 'notDefined'\\\.")
set_property(TEST variable/unreached-undefined.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST variable/use-false-as-var.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"false\\\", expect variable name\\\.")
set_property(TEST variable/uninitialized.lax PROPERTY PASS_REGULAR_EXPRESSION "^nil\n$")
set_property(TEST variable/use-global-in-initializer.lax PROPERTY PASS_REGULAR_EXPRESSION "^value\n$")
set_property(TEST variable/use-local-in-initializer.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"a\\\", can't read local variable in its own initializer\\\.")
set_property(TEST variable/use-this-as-var.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2] Error: at \\\"this\\\", expect variable name\\\.")
set_property(TEST variable/use-nil-as-var.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"nil\\\", expect variable name\\\.")
set_property(TEST while/class-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"class\\\", expect expression\\\.")
set_property(TEST while/closure-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "^123\n$")
set_property(TEST while/fun-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"fn\\\", expect expression\\\.")
set_property(TEST while/return-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^i\n$")
set_property(TEST while/return-inside.lax PROPERTY PASS_REGULAR_EXPRESSION "^i\n$")
set_property(TEST while/syntax.lax PROPERTY PASS_REGULAR_EXPRESSION "^123012\n$")
set_property(TEST while/var-in-body.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 2\\\] Error: at \\\"var\\\", expect expression\\\.")
set_property(TEST others/unexpected-character.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 1\\\] Error: at \\\"|\\\", unexpected characters\\\.")
