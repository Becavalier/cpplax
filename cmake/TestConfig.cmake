include(CTest)
file(GLOB children "${TEST_PATH}/*")
if("$ENV{TEST_TARGET}" STREQUAL "INTERPRETER")
  set(EXTRA_TEST_ARG "-i")
endif()
foreach(child ${children})
  get_filename_component(folderName "${child}" NAME)
  if(IS_DIRECTORY ${child})
    file(GLOB files "${child}/*.lax")
    foreach(file ${files})
      get_filename_component(fileName "${file}" NAME)
      add_test(NAME "${folderName}/${fileName}" COMMAND $<TARGET_FILE:cpplax> ${EXTRA_TEST_ARG} ${file})
    endforeach()
  endif()
endforeach()

# CTest will accidentally add a "\n" character at the end of each input, which actually does not belong to the original output of the test cases.
set_property(TEST assignment/associativity.lax PROPERTY PASS_REGULAR_EXPRESSION "^ccc5varvar\n$")
set_property(TEST assignment/global.lax PROPERTY PASS_REGULAR_EXPRESSION "^beforeafterargarg\n$")
set_property(TEST assignment/grouping.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 2\\\] Error: at \\\"=\\\", invalid assignment target.\n")
set_property(TEST assignment/infix-operator.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 3\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/prefix-operator.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 2\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/local.lax PROPERTY PASS_REGULAR_EXPRESSION "^beforeafterargarg\n$")
set_property(TEST assignment/this.lax PROPERTY PASS_REGULAR_EXPRESSION "^\\\[Line 3\\\] Error: at \\\"=\\\", invalid assignment target.\n$")
set_property(TEST assignment/undefined.lax PROPERTY PASS_REGULAR_EXPRESSION "undefined variable 'unknown'.")
set_property(TEST block/empty.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST block/scope.lax PROPERTY PASS_REGULAR_EXPRESSION "^innerouter\n$")
set_property(TEST bool/equality.lax PROPERTY PASS_REGULAR_EXPRESSION "^truefalsefalsetruefalsefalsefalsefalsefalsefalsefalsetruetruefalsetruetruetruetruetrue\n$")
set_property(TEST bool/not.lax PROPERTY PASS_REGULAR_EXPRESSION "^falsetruetruetruefalsefalse\n$")
set_property(TEST call/bool.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/nil.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/num.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/object.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST call/string.lax PROPERTY PASS_REGULAR_EXPRESSION "can only call functions and classes.")
set_property(TEST class/empty.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST class/inherit-self.lax PROPERTY PASS_REGULAR_EXPRESSION "^(\\\[Line 1\\\] Error: at \\\"Foo\\\", a class can't inherit from itself.|\\\[Line 1\\\] Error: at \\\"Foo\\\", undefined variable 'Foo'.)\n$")
set_property(TEST class/inherited-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^in fooin barin baz\n$")
set_property(TEST class/local-inherit-other.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class B>\n$")
set_property(TEST class/local-inherit-self.lax PROPERTY PASS_REGULAR_EXPRESSION "(can't read local variable in its own initializer|a class can't inherit from itself)")
set_property(TEST class/local-reference-self.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST class/reference-self.lax PROPERTY PASS_REGULAR_EXPRESSION "^<class Foo>\n$")
set_property(TEST closure/assign-to-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^localafter fafter fafter g\n$")
set_property(TEST closure/assign-to-shadowed-later.lax PROPERTY PASS_REGULAR_EXPRESSION "^innerassigned\n$")
set_property(TEST closure/close-over-function-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "^param\n$")
set_property(TEST closure/close-over-later-variable.lax PROPERTY PASS_REGULAR_EXPRESSION "^ba\n$")
set_property(TEST closure/close-over-method-parameter.lax PROPERTY PASS_REGULAR_EXPRESSION "^param\n$")
set_property(TEST closure/closed-closure-in-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^local\n$")
set_property(TEST closure/nested-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^abc\n$")
set_property(TEST closure/open-closure-in-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^local\n$")
set_property(TEST closure/reference-closure-multiple-times.lax PROPERTY PASS_REGULAR_EXPRESSION "^aa\n$")
set_property(TEST closure/reuse-closure-slot.lax PROPERTY PASS_REGULAR_EXPRESSION "^a\n$")
set_property(TEST closure/shadow-closure-with-local.lax PROPERTY PASS_REGULAR_EXPRESSION "^closureshadowclosure\n$")
set_property(TEST closure/unused-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST closure/unused-later-closure.lax PROPERTY PASS_REGULAR_EXPRESSION "^a\n$")
set_property(TEST comments/line-at-eof.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST comments/unicode.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST comments/multi-line-comment.lax PROPERTY PASS_REGULAR_EXPRESSION "^ok\n$")
set_property(TEST constructor/arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "^init12\n$")
set_property(TEST constructor/call-init-early-return.lax PROPERTY PASS_REGULAR_EXPRESSION "^initinit<instance Foo>\n$")
set_property(TEST constructor/call-init-explicitly.lax PROPERTY PASS_REGULAR_EXPRESSION "^Foo.init\\\(one\\\)Foo.init\\\(two\\\)<instance Foo>init\n$")
set_property(TEST constructor/default-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 0 arguments but got 3")
set_property(TEST constructor/default.lax PROPERTY PASS_REGULAR_EXPRESSION "^<instance Foo>\n$")
set_property(TEST constructor/early-return.lax PROPERTY PASS_REGULAR_EXPRESSION "^init<instance Foo>\n$")
set_property(TEST constructor/extra-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 2 arguments but got 4.")
set_property(TEST constructor/init-not-method.lax PROPERTY PASS_REGULAR_EXPRESSION "^not initializer\n$")
set_property(TEST constructor/missing-arguments.lax PROPERTY PASS_REGULAR_EXPRESSION "expected 2 arguments but got 1.")
set_property(TEST constructor/return-in-nested-function.lax PROPERTY PASS_REGULAR_EXPRESSION "^bar<instance Foo>\n$")
set_property(TEST constructor/return-value.lax PROPERTY PASS_REGULAR_EXPRESSION "\\\[Line 3\\\] Error: at \\\"return\\\", can't return a value from an initializer.")
